.TH "Docs_PT/ParticleTracking_source/InitialPartPositions.c" 3 "Mon Jun 24 2019" "dfnTrans" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Docs_PT/ParticleTracking_source/InitialPartPositions.c
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <search\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'FuncDef\&.h'\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBinpfile\fP"
.br
.ti -1c
.RI "struct \fBposit3d\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBInitPos\fP ()"
.br
.ti -1c
.RI "int \fBInitCell\fP ()"
.br
.ti -1c
.RI "int \fBInitParticles_np\fP (int k_current, int firstnd, int lastnd, int parts_fracture, int first_ind, int last_ind)"
.br
.ti -1c
.RI "int \fBInitParticles_eq\fP (int k_current, int firstn, int lastn, double parts_dist, int first_ind, int last_ind)"
.br
.ti -1c
.RI "int \fBInitParticles_ones\fP (int k_current, double inter_p[][4], int fracture_n, int parts_fracture, int ii, double thirdcoor, int zonenumb_in, int first_ind, int last_ind)"
.br
.ti -1c
.RI "void \fBFlowInWeight\fP (int numberpart)"
.br
.ti -1c
.RI "void \fBInitInMatrix\fP ()"
.br
.ti -1c
.RI "double \fBTimeFromMatrix\fP (double pdist)"
.br
.ti -1c
.RI "int \fBInitParticles_flux\fP (int k_current, int first_ind, int last_ind, double weight_p)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void FlowInWeight (int numberpart)"
Function calculates particle's in-flow flux weight\&. Used in option #1, #2, #3\&. 
.PP
Definition at line 861 of file InitialPartPositions\&.c\&.
.SS "int InitCell ()"
Function performs a search to find cell Id where the particle was initially placed\&. 
.PP
Definition at line 621 of file InitialPartPositions\&.c\&.
.SS "void InitInMatrix ()"
Function performs data reading from files for Option #5, init_matrix\&. In this option particles are placed at random positions in matrix, the time to move from initial position to nearest fracture is calculated in function TimeFromMatrix\&.
.PP
Input files ParticleInitCoordR\&.dat and ClosestNodeR\&.inp provide particles initial positions at matrix and te closes node ID at DFN mesh, respectively\&. 
.PP
Definition at line 968 of file InitialPartPositions\&.c\&.
.SS "int InitParticles_eq (int k_current, int firstn, int lastn, double parts_dist, int first_ind, int last_ind)"
Function defines particles initial positions at a single fracture edge, using calculated before distance between particles\&. Option #2, init_eqd\&. 
.PP
Definition at line 711 of file InitialPartPositions\&.c\&.
.SS "int InitParticles_flux (int k_current, int first_ind, int last_ind, double weight_p)"
Function defines particle's initial positions at single fracture edge in Option #6\&. Particles are placed according to input flux weights\&. In this case, all the particles have the same flux weight, but number of particles per fracture edge depends on in-flow flux of this fracture\&. 
.PP
Definition at line 1095 of file InitialPartPositions\&.c\&.
.SS "int InitParticles_np (int k_current, int firstnd, int lastnd, int parts_fracture, int first_ind, int last_ind)"
Function defines particle's initial positions on a single fracture edge\&. Option #1, init_nf 
.PP
Definition at line 660 of file InitialPartPositions\&.c\&.
.SS "int InitParticles_ones (int k_current, double inter_p[][4], int fracture_n, int parts_fracture, int ii, double thirdcoor, int zonenumb_in, int first_ind, int last_ind)"
Function defines particles initial positions in option #3, where user defines region at in-flow boundary face for particles\&. 
.PP
Definition at line 764 of file InitialPartPositions\&.c\&.
.SS "int InitPos ()"
Function defines the required option of particles initial positions defined at input control file; calculates number of particles, allocates memory\&. First option init_nf: equal number of particles on every boundary edge regardless of edge length
.PP
Second option init_eqd: calculate total length of boundary edges; define the distance between particles and place particles equidistant from each other on all edges
.PP
Third option init_oneregion: user specifies a region and all particles start from the fracture edges that located inside the region
.PP
Fourth option init_random: particles will be set randomly over all fractures surfaces; in this case the particles are weighted acoording to the aperture
.PP
5th option init_matrix: particles are set randomly in rock matrix, their time from initial positions is calculated, then particles move through fractures to out-flow boundary\&. This option requires preprocessing; the script RandomPositGener\&.py will provide necessary input files
.PP
Sixth option init_flux: place particles according to input fluxes\&. Each particle has the same flux weight\&. The number of particles are placed propportionally to inflow flux on each cell and fracture edge\&. 
.PP
Definition at line 21 of file InitialPartPositions\&.c\&.
.SS "double TimeFromMatrix (double pdist)"
Option #5\&. Estimation of travel time of particles moving from matrix to the closest fracture\&. 
.PP
Definition at line 1062 of file InitialPartPositions\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for dfnTrans from the source code\&.
